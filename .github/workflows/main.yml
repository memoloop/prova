name: Build and Deploy with PyInstaller

on:
  push:
    branches:
      - main  # Attiva il workflow sui push nel branch principale
  workflow_dispatch: # Permette l'esecuzione manuale del workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout del repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Impostazione di Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # Specifica la versione di Python

    # Installazione di dipendenze
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    # Compilazione con PyInstaller
    - name: Build executable
      run: |
        pyinstaller --onefile --name MyApp main.py

    # Archiviazione degli artefatti
    - name: Upload executable
      uses: actions/upload-artifact@v3
      with:
        name: MyApp
        path: dist/MyApp*  # Modifica in base al nome del file eseguibile

  create_tag:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Crea un tag se non esiste
    - name: Create tag
      run: |
        TAG_NAME="v$(date +'%Y.%m.%d')"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$TAG_NAME" -m "Automated release"
        git push origin "$TAG_NAME"

  deploy:
    needs: [build, create_tag]
    runs-on: ubuntu-latest

    steps:
    # Checkout del repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Download degli artefatti
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: MyApp

    # Pubblicazione su GitHub Releases
    - name: Deploy to GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        files: dist/MyApp*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
